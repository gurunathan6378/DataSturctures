1.) Concurrent read with the commited value and exculsive writes with locks
2.)You have a set of tiles, where each tile has one letter tiles[i] printed on it.  
Return the nu mber of possible non-empty sequences of letters you can make.

Example 1:

Input: "AAB"
Output: 8
Explanation: The possible sequences are "A", "B", "AA", "AB", "BA", "AAB", "ABA", "BAA".
Example 2:

Input: "AAABBC"
Output: 188
 

Note:

1 <= tiles.length <= 7
tiles consists of uppercase English letters.

3.) Given an integer array find the max median for K iterations
For example : 1 , 2, 5, 3, 5 K = 2 Max median = 5

4.) Given a pair of groups merge the group which matches X and Y. 
	
		[1,3]
		[6,8]
		[10, 12]
		[8,3]
		
For example  
		[1, 3] 
		[6, 8] --> Is not matching with previous group so inserting as a new group
		[10 ,12 ] --> Is not matching with previous group so inserting as a new group
		[8,3]  --> 8 is present in [ 6, 8] and 3 is matching with [1,3], so this can be grouped into one [1, 3, 6 , 8] 
		so now we have only 2  groups below and output that

		[1,3,6, 8]
		[10, 12]


5.) A wall of bricks, two types: with holes (0) ; solid (1)
Rain can go through the brick with holes, but will be blocked by solid bricks 

0 1 0
0 0 1
1 0 1 

0,0  = 0
1,0 =  0
1,1 =  0

----------
Return true if there is a path for rain to reach ground 


Input: m*n 
Output: true/false

public bool FindWayForRainWater(int[,] input)
{
    if (input == null)
    {
        return false;
    }
    
    int rl = input.GetLength(0);
    int cl = input.GetLength(1);
    
    bool[,] visited = new bool[rl, cl];
    
    bool[,] reachable
    
    
    rechable[i,j] = input [i,j] == 0 && ( rechable [i-1, j] || rechable [i-1, j-1] || rechable [i-1, j+1] )
    
    int r = 0;
    int c = 0;
    
    while (r < rl && c< cl)
    {
               
                if (input[r,c] == 0 && r + 1 >0 && c + 1 > 0 && r+1 < rl && c+1 < cl && 
                    (input[r + i, c] == 0  || input[r+1 ,c + 1] ==0) && !visited[r+1 , c+ j])          
            
    }    
    
}

5.)  First Bad Version
Solution
You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.
Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.
You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.

Example:
Given n = 5, and version = 4 is the first bad version.

call isBadVersion(3) -> false
call isBadVersion(5) -> true
call isBadVersion(4) -> true

Then 4 is the first bad version. 

6.) Jewels and Stones
Solution
You're given strings J representing the types of stones that are jewels, and S representing the stones you have.  Each character in S is a type of stone you have.  You want to know how many of the stones you have are also jewels.

The letters in J are guaranteed distinct, and all characters in J and S are letters. Letters are case sensitive, so "a" is considered a different type of stone from "A".

Example 1:

Input: J = "aA", S = "aAAbbbb"
Output: 3
Example 2:

Input: J = "z", S = "ZZ"
Output: 0
Note:

S and J will consist of letters and have length at most 50.
The characters in J are distinct.
Hint #1  :
For each stone, check if it is a jewel.

7.) Ransom Note
Solution
Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.

Each letter in the magazine string can only be used once in your ransom note.

Example 1:

Input: ransomNote = "a", magazine = "b"
Output: false

Example 2:
Input: ransomNote = "aa", magazine = "ab"
Output: false

Example 3:
Input: ransomNote = "aa", magazine = "aab"
Output: true

Constraints:

You may assume that both strings contain only lowercase letters.

8.) First Unique Character in a String
Solution
Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.

Examples:
s = "leetcode"
return 0.

s = "loveleetcode",
return 2.
Note: You may assume the string contain only lowercase letters.

9.) Valid Perfect Square
Solution
Given a positive integer num, write a function which returns True if num is a perfect square else False.

Follow up: Do not use any built-in library function such as sqrt.

Example 1:
Input: num = 16
Output: true

Example 2:
Input: num = 14
Output: false

10.)  Maximum Sum Circular Subarray
Solution
Given a circular array C of integers represented by A, find the maximum possible sum of a non-empty subarray of C.

Here, a circular array means the end of the array connects to the beginning of the array.  (Formally, C[i] = A[i] when 0 <= i < A.length,
and C[i+A.length] = C[i] when i >= 0.)

Also, a subarray may only include each element of the fixed buffer A at most once.  (Formally, for a subarray C[i], C[i+1], ..., C[j], 
there does not exist i <= k1, k2 <= j with k1 % A.length = k2 % A.length.)

Example 1:

Input: [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3
Example 2:

Input: [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10
Example 3:

Input: [3,-1,2,-1]
Output: 4
Explanation: Subarray [2,-1,3] has maximum sum 2 + (-1) + 3 = 4
Example 4:

Input: [3,-2,2,-3]
Output: 3
Explanation: Subarray [3] and [3,-2,2] both have maximum sum 3
Example 5:

Input: [-2,-3,-1]
Output: -1
Explanation: Subarray [-1] has maximum sum -1

Hint #1  
For those of you who are familiar with the Kadane's algorithm, think in terms of that. For the newbies,
Kadane's algorithm is used to finding the maximum sum subarray from a given array. This problem is a twist on 
that idea and it is advisable to read up on that algorithm first before starting this problem. Unless you 
already have a great algorithm brewing up in your mind in which case, go right ahead!

Hint #2  
What is an alternate way of representing a circular array so that it appears to be a straight array? 
Essentially, there are two cases of this problem that we need to take care of. Let's look at the figure below 
to understand those two cases:

Hint #3  
The first case can be handled by the good old Kadane's algorithm. However, is there a smarter way of going about
handling the second case as well?

11.)  Find All Anagrams in a String
Solution
Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".

12.) Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.

You have the following 3 operations permitted on a word:

Insert a character
Delete a character
Replace a character
Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')

13.)Word Search II

Solution
Given a 2D board and a list of words from the dictionary, find all words in the board.

Each word must be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

Example:

Input: 
board = [
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]
words = ["oath","pea","eat","rain"]

Output: ["eat","oath"]
 

Note:

All inputs are consist of lowercase letters a-z.
The values of words are distinct.

Hint #1  
    You would need to optimize your backtracking to pass the larger test. Could you stop backtracking earlier?
Hint #2  
    If the current candidate does not exist in all words' prefix, you could stop backtracking immediately. 
    What kind of data structure could answer such query efficiently? Does a hash table work? Why or why not? How about a Trie? If you would like to learn how to 
    implement a basic trie, please work on this problem: Implement Trie (Prefix Tree) first.

