public void HeapSort(a, count) 
{
    //input: an unordered array a of length count
 
    //(Build the heap in array a so that largest value is at the root)
    this.Heapify(a, count);

    //(The following loop maintains the invariants that a[0:end] is a heap and every element
    //beyond end is greater than everything before it (so a[end:count] is in sorted order))
    int end = count - 1;
    while end > 0 
	{
        //(a[0] is the root and largest value. The swap moves it in front of the sorted elements.)
        this.Swap(a, end, 0);
        //(the heap size is reduced by one)
        end = end - 1;
        //(the swap ruined the heap property, so restore it)
        this.ShiftDown(a, 0, end)
	}
}